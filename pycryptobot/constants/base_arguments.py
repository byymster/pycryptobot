from cement.utils.version import get_version_banner
from ..core.version import get_version

VERSION_BANNER = """
Crypto Bot %s
%s
""" % (get_version(), get_version_banner())

base_arguments = [
            ### add a version banner
            (['-v', '--version'],
             dict(action='version',
                  version=VERSION_BANNER)),
            (['--exchange'],
             dict(help="'coinbasepro', 'binance', 'kucoin', 'dummy'")),
            (['--granularity'],
             dict(
                 help="coinbasepro: (60,300,900,3600,21600,86400), binance: (1m,5m,15m,1h,6h,1d), kucoin: (1min,3min,5min,15min,30min,1hour,6hour,1day)")),
            (['--graphs'],
             dict(default=0,
                  type=int,
                  help="save graphs=1, do not save graphs=0")),
            (['--live'],
             dict(default=0,
                  type=int,
                  help="live=1, test=0")),
            (['--market'],
             dict(help="coinbasepro and kucoin: BTC-GBP, binance: BTCGBP etc.")),
            (['--sellatloss'],
             dict(type=int,
                  help="toggle if bot should sell at a loss")),
            (['--sellupperpcnt'],
             dict(type=float,
                  help="optionally set sell upper percent limit")),
            (['--selllowerpcnt'],
             dict(type=float,
                  help="optionally set sell lower percent limit")),
            (['--nosellminpcnt'],
             dict(type=float,
                  help="optionally set minimum margin to not sell")),
            (['--nosellmaxpcnt'],
             dict(type=float,
                  help="optionally set maximum margin to not sell")),
            (['--trailingstoploss'],
             dict(type=float,
                  help="optionally set a trailing stop percent loss below last buy high")),
            (['--trailingstoplosstrigger'],
             dict(type=float,
                  help="optionally set when the trailing stop loss should start")),
            (["--sim"],
             dict(type=str,
                  help="simulation modes: fast, fast-sample, slow-sample")),
            (["--simstartdate"],
             dict(type=str,
                  help="start date for sample simulation e.g '2021-01-15'"),
             ),
            (["--simenddate"],
             dict(type=str,
                  help="end date for sample simulation e.g '2021-01-15' or 'now'",
                  )
             ),
            (["--smartswitch"],
             dict(type=int,
                  help="optionally smart switch between 1 hour and 15 minute intervals",
                  )
             ),
            (["--verbose"],
             dict(type=int,
                  help="verbose output=1, minimal output=0")
             ),
            (["--config"],
             dict(type=str,
                  help="Use the config file at the given location. e.g 'myconfig.json'"),
             ),
            (['--logfile'],
             dict(default='pycryptobot.log',
                  help="Use the log file at the given location. e.g 'mymarket.log'")),
            (["--tradesfile"],
             dict(type=str,
                  help="Path to file to log trades done during simulation. eg './trades/BTCBUSD-trades.csv"),
             ),
            (["--buypercent"],
             dict(type=int,
                  help="percentage of quote currency to buy"
                  )
             ),
            (["--sellpercent"],
             dict(type=int,
                  help="percentage of base currency to sell"
                  )),
            (["--lastaction"],
             dict(type=str,
                  help="optionally set the last action (BUY, SELL)"
                  )),
            (["--buymaxsize"],
             dict(type=float,
                  help="maximum size on buy")),
            (["--nobuynearhighpcnt"],
             dict(type=float,
                  help="optionally set the percent of the high for buying near high if enabled"),
             ),
            # optional options
            (["--sellatresistance"],
             dict(action="store_true",
                  help="sell at resistance or upper fibonacci band",
                  )),
            (["--autorestart"],
             dict(action="store_true",
                  help="Auto restart the bot in case of exception",
                  )),
            (["--stats"],
             dict(action="store_true",
                  help="display summary of completed trades"
                  )),
            (["--statgroup"],
             dict(nargs="+",
                  help="add multiple currency pairs to merge stats"
                  )),
            (["--statstartdate"],
             dict(type=str,
                  help="trades before this date are ignored in stats function e.g 2021-01-15",
                  )),
            (["--statdetail"],
             dict(action="store_true",
                  help="display detail of completed transactions for a given market",
                  )),
            (["--simresultonly"],
             dict(action="store_true",
                  help="show simulation result only",
                  )),

            # disable defaults
            (["--disablebullonly"],
             dict(action="store_true",
                  help="disable only buying in bull market",
                  )),
            (["--disablebuynearhigh"],
             dict(action="store_true",
                  help="disable buy within 3 percent of high",
                  )),
            (["--disablebuymacd"],
             dict(action="store_true",
                  help="disable macd buy signal"
                  )),
            (["--disablebuyema"],
             dict(action="store_true",
                  help="disable ema buy signal"
                  )),
            (["--disablebuyobv"],
             dict(action="store_true",
                  help="disable obv buy signal"
                  )),
            (["--disablebuyelderray"],
             dict(action="store_true",
                  help="disable elder ray buy signal",
                  )),
            (["--disablefailsafefibonaccilow"],
             dict(action="store_true",
                  help="disable failsafe sell on fibonacci lower band",
                  )),
            (["--disablefailsafelowerpcnt"],
             dict(action="store_true",
                  help="disable failsafe sell on 'selllowerpcnt'",
                  )),
            (["--disableprofitbankupperpcnt"],
             dict(action="store_true",
                  help="disable profit bank on 'sellupperpcnt'",
                  )),
            (["--disableprofitbankreversal"],
             dict(action="store_true",
                  help="disable profit bank on strong candlestick reversal",
                  )),
            (["--disabletelegram"],
             dict(action="store_true",
                  help="disable telegram messages"
                  )),
            (["--disablelog"],
             dict(action="store_true",
                  help="disable pycryptobot.log"
                  )),
            (["--disabletracker"],
             dict(action="store_true",
                  help="disable tracker.csv"
                  )),
            (["--recvWindow"],
             dict(type=int,
                  help="binance exchange api recvWindow, integer between 5000 and 60000",
                  )),
            (["--enableml"],
             dict(action="store_true",
                  help="Enable Machine Learning E.g. seasonal ARIMA model for predictions",
                  )),
            (["--websocket"],
             dict(action="store_true",
                  help="Enable websocket")),
        ]